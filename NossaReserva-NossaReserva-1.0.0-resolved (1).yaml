---
swagger: "2.0"
info:
  description: "This is our documentation to NossaReserva's API.  You can find \nout more about Swagger at \n[http://swagger.io](http://swagger.io) or on \n[irc.freenode.net, #swagger](http://swagger.io/irc/).\n"
  version: 1.0.0
  title: Nossa Reserva API
  termsOfService: http://swagger.io/terms/
  contact:
    email: nossa.reserva.condominios@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: virtserver.swaggerhub.com
basePath: /NossaReserva/NossaReserva/1.0.0
tags:
- name: Reserva
  description: Reserva de areas comuns
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: user
  description: usuários do sistema
- name: AreaComum
  description: Areas comuns para ser reservadas
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
schemes:
- https
- http
paths:
  /AreaComum:
    post:
      tags:
      - AreaComum
      summary: Adicionar uma nova area comum na aplicação
      operationId: addAreaComum
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Area para ser adicionada na aplicação
        required: true
        schema:
          $ref: '#/definitions/AreaComun'
      security:
      - nossareserva_auth:
        - write:pets
        - read:pets
      responses:
        "405":
          description: Invalid input
  /AreaComum/{AreaComumId}:
    get:
      tags:
      - AreaComum
      summary: Buscar Area Comum pelo ID
      description: Retorna uma única área comum
      operationId: getAreaComumById
      produces:
      - application/json
      parameters:
      - name: AreaComumId
        in: path
        description: Área da área comum para retornar
        required: true
        type: integer
        format: int64
      security:
      - api_key: []
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/AreaComun'
        "400":
          description: Invalid ID supplied
        "404":
          description: Área comum não encontrada
    put:
      tags:
      - AreaComum
      summary: Atualiza a área comum com um data form
      operationId: updateAreaComumWithForm
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      parameters:
      - name: AreaComumId
        in: path
        description: ID da área comum que será atualizada
        required: true
        type: integer
        format: int64
      - name: name
        in: formData
        description: Updated name of the pet
        required: false
        type: string
      - name: status
        in: formData
        description: Updated status of the pet
        required: false
        type: string
      security:
      - nossareserva_auth:
        - write:pets
        - read:pets
      responses:
        "405":
          description: Invalid input
    delete:
      tags:
      - AreaComum
      summary: Deleta uma area comum
      operationId: deleteAreaComum
      produces:
      - application/json
      parameters:
      - name: api_key
        in: header
        required: false
        type: string
      - name: AreaComumId
        in: path
        description: id da Area Comum para deletar
        required: true
        type: integer
        format: int64
      security:
      - nossareserva_auth:
        - write:pets
        - read:pets
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Area Comum não encontrada
  /AreaComum/{AreaComumId}/uploadImage:
    post:
      tags:
      - AreaComum
      summary: uploads an image
      operationId: uploadFile
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: AreaComumId
        in: path
        description: ID da Area para atualizar
        required: true
        type: integer
        format: int64
      - name: additionalMetadata
        in: formData
        description: Additional data to pass to server
        required: false
        type: string
      - name: file
        in: formData
        description: file to upload
        required: false
        type: file
      security:
      - nossareserva_auth:
        - write:pets
        - read:pets
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/ApiResponse'
  /reserva:
    get:
      tags:
      - Reserva
      summary: Retorna as reservas como uma lista
      description: Retorna as reservas
      operationId: getReserva
      produces:
      - application/json
      parameters: []
      security:
      - api_key: []
      responses:
        "200":
          description: successful operation
          schema:
            type: object
            additionalProperties:
              type: integer
              format: int32
    post:
      tags:
      - Reserva
      summary: Cria uma nova reserva
      description: Retorna as reservas
      operationId: postReserva
      produces:
      - application/json
      parameters: []
      security:
      - api_key: []
      responses:
        "200":
          description: successful operation
          schema:
            type: object
            additionalProperties:
              type: integer
              format: int32
  /reserva/{ReservaId}:
    get:
      tags:
      - Reserva
      summary: Retorna a Reserva pelo ID
      description: For valid response try integer IDs with value >= 1 and <= 10.\ \ Other values will generated exceptions
      operationId: getReservaById
      produces:
      - application/json
      parameters:
      - name: ReservaId
        in: path
        description: Id da reserva que precisa ser retornada
        required: true
        type: integer
        maximum: 10
        minimum: 1
        format: int64
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Reverva não encontrada
    put:
      tags:
      - Reserva
      summary: Atualizar a reserva pelo ID
      description: For valid response try integer IDs with positive integer value.\ \ Negative or non-integer values will generate API errors
      operationId: updateReserva
      produces:
      - application/json
      parameters:
      - name: ReservaId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        type: integer
        minimum: 1
        format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
    delete:
      tags:
      - Reserva
      summary: Deletar a reserva pelo ID
      description: For valid response try integer IDs with positive integer value.\ \ Negative or non-integer values will generate API errors
      operationId: deleteOrder
      produces:
      - application/json
      parameters:
      - name: ReservaId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        type: integer
        minimum: 1
        format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
  /user:
    get:
      tags:
      - user
      summary: Get users
      description: Listar usuários.
      operationId: listUser
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: list users objects
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in admin user.
      operationId: createUser
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: Created user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
          schema:
            type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      produces:
      - application/json
      - application/xml
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      produces:
      - application/json
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched. Use user1 for testing.
        required: true
        type: string
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        type: string
      - in: body
        name: body
        description: Updated user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
securityDefinitions:
  nossareserva_auth:
    type: oauth2
    authorizationUrl: http://petstore.swagger.io/oauth/dialog
    flow: implicit
    scopes:
      write:pets: modify pets in your account
      read:pets: read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      apartamento:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
    xml:
      name: User
  Reserva:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      date:
        type: string
      carvao:
        type: boolean
      gelo:
        type: boolean
      horario:
        type: string
      morador:
        type: integer
    xml:
      name: Tag
  AreaComun:
    type: object
    required:
    - name
    - photoUrls
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        example: Churrasqueira
      photoUrls:
        type: array
        xml:
          name: photoUrl
          wrapped: true
        items:
          type: string
      tags:
        type: array
        xml:
          name: tag
          wrapped: true
        items:
          $ref: '#/definitions/Reserva'
      status:
        type: string
        description: Status da área comum
        enum:
        - available
        - pending
        - reserved
    xml:
      name: Reserva
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
